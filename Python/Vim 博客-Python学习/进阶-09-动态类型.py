# 在 Python 中，存储数据的都是对象（C# 中的变量），我们定义的对象只是指向这一对象的引用
# 引用和对象分离，是动态类型的核心
a = 3
a = 'at'

# 第一个语句中，3是储存在内存中的一个整数对象。通过赋值，引用a指向对象3。

# 第二个语句中，内存中建立对象‘at’，是一个字符串(string)。引用a指向了'at'。此时，对象3不再有引用指向它。Python会自动将没有引用指向的对象销毁(destruct)，释放相应内存。

# (对于小的整数和短字符串，Python会缓存这些对象，而不是频繁的建立和销毁。)

# 有一点，看是改变对象的指向，还是对象指向的值，后者的话指向该值的都会变

# 列表可以通过引用其元素，改变对象自身(in-place change)。这种对象类型，称为可变数据对象(mutable object)，词典也是这样的数据类型。

# 而像之前的数字和字符串，不能改变对象本身，只能改变引用的指向，称为不可变数据对象(immutable object)。

# 我们之前学的元组(tuple)，尽管可以调用引用元素，但不可以赋值，因此不能改变对象自身，所以也算是immutable object.

def f(x):
    x = 100
    print (x)

a = 1
f(a)
print (a)

# 参数x是一个新的引用，指向a所指的对象。
# 如果参数是不可变(immutable)的对象，a和x引用之间相互独立。对参数x的操作不会影响引用a。
def fc(x):
    x[0] = 100
    print (x)

a = [1,2,3]
fc(a)
print (a)
