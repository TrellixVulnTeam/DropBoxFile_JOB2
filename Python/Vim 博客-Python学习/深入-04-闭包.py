# 闭包(closure)是函数式编程的重要的语法结构
# 函数式编程是一种编程范式（而面向过程编程和面向对象编程也都是编程范式）
# 在面向过程编程中，我们见到的函数；在面向对象编程中，我们见到的对象
# 函数和对象的根本目的的以某种逻辑方式组织代码，并提高代码的“可重复实用性”(reusability)
# 闭包也是一种组织代码结构，它同样提高了代码的可重复实用性

# 不同的语言实现闭包的方式不同
# Python 以 函数对象 为基础，为闭包这一语法结构提供支持
# Python 一切皆对象，函数这一语法结构也是一个对象
# 在函数对象中，我们像使用一个普通对象一样使用函数对象，比如更改函数对象的名字、将函数对象作为参数进行传递


# 函数对象的作用域------------------------------------------------------------
  # 这个和 C# 中的一样，就是函数的作用域，变量什么的都一样


# 闭包-----------------------------------------------------------------------

# 函数是一个对象，所以可以作为某个函数的 返回结果

'''
def line_conf():
    def line(x):
        return 2*x + 1
    return line

my_line = line_conf()

print (my_line(5))
'''

# 一个函数和它的环节变量合在一起，就构成了一个闭包
# 在 Python 中，所谓的闭包是一个含有环境变量取值的函数对象
# 环节变量的取值保存在函数对象的 __closure__  属性中
'''
def line_conf():
    b = 15
    def line(x):
        return 2*x + b
    return line

b = 5

my_line = line_conf()
print (my_line.__closure__)
print (my_line.__closure__[0].cell_contents)
'''

# 闭包的实际例子，变换参数a,b 就可以获得不同的直线表达函数

def line_conf(a,b):
    def line(x):
        return a*x + b
    return line

line1 = line_conf(1,1)
line2 = line_conf(4,5)

print (line1(5),line2(5))

# 闭包与并行运算-------------------------------------------------------------------------------------
# 闭包有效减少了函数所需定义的参数数目。这对于并行运算来说有重要的意义。
# 在并行运算的环境下，我们可以让每台电脑负责一个函数，然后将一台电脑的输出和吓一台电脑的输入串联起来。
# 最终，我们像流水线意义工作，从串联的电脑的集群一端输入数据，从另一端输出数据。
# 这样的情境最适合只有一个参数输入的函数。闭包就可以实现这一目的

# 并行运算正成为一个热点，这是函数式编程又热起来的一个重要原因


